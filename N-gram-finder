# file: repeating_patterns_input.py

from collections import defaultdict

def find_repeating_patterns(ciphertext: str, ngram_length: int = 3):
    """
    Finds repeating patterns in a ciphertext.

    Args:
        ciphertext (str): The encrypted text to analyze.
        ngram_length (int): Length of the repeating patterns to search for.

    Returns:
        dict: A dictionary where keys are n-grams and values are lists of start indices.
    """
    patterns = defaultdict(list)
    ciphertext = ciphertext.replace(" ", "").upper()  # Normalize the text

    for i in range(len(ciphertext) - ngram_length + 1):
        ngram = ciphertext[i:i + ngram_length]
        patterns[ngram].append(i)

    # Filter only n-grams that repeat
    repeating_patterns = {k: v for k, v in patterns.items() if len(v) > 1}
    return repeating_patterns

def display_pattern_distances(patterns: dict):
    """
    Displays repeating patterns and their distances.

    Args:
        patterns (dict): A dictionary of n-grams and their start indices.
    """
    if not patterns:
        print("\nNo repeating patterns found.")
        return

    print("\nRepeating Patterns and Distances:")
    for ngram, indices in patterns.items():
        distances = [indices[i] - indices[i - 1] for i in range(1, len(indices))]
        print(f" {ngram},  {indices}, {distances}")

def main():
    """
    Main function to interact with the user for input and find repeating patterns.
    """
    print("### Repeating Pattern Finder ###")
    ciphertext = input("Enter the ciphertext: ").strip()
    ngram_length = input("Enter the n-gram length (default 3): ").strip()

    # Set default n-gram length if input is not provided
    ngram_length = int(ngram_length) if ngram_length.isdigit() else 3

    print("\nAnalyzing ciphertext...")
    patterns = find_repeating_patterns(ciphertext, ngram_length)
    display_pattern_distances(patterns)

if __name__ == "__main__":
    main()
